class stama{constructor(t=!0){this.state=this.getFromLocalStorage()||{},this.listeners={},this.middlewares=[],this.previousState={},this.persist=t,this.debugMode=!1,this.history=[],this.historyIndex=-1,this.debugMode&&console.log("stama initialized",this.state)}get(t){return this.state[t]}set(t,s){const e={...this.state};this.history.push(e),this.historyIndex++,this.previousState[t]=this.state[t],this.runMiddlewares(t,s),this.state[t]=s,this.persist&&this.setToLocalStorage(),this.debugMode&&console.log(`State changed: ${t} = ${s}`),this.listeners[t]&&this.listeners[t].forEach(t=>t(s))}setUrlParam(t,s){const e=new URL(window.location);e.searchParams.set(t,s),window.history.pushState({},"",e),this.set(t,s),this.debugMode&&console.log(`set url param: ${t} = ${s}`)}getUrlParam(t){const s=new URL(window.location),e=s.searchParams.get(t);return null!==e&&this.set(t,e),this.debugMode&&console.log(`get url param: ${t} = ${e}`),e}syncStateWithUrl(t){t.forEach(t=>{const s=this.getUrlParam(t);if(null!==s)this.set(t,s);else{const s=this.get(t);void 0!==s&&this.setUrlParam(t,s)}})}initFromUrl(t){t.forEach(t=>{const s=this.getUrlParam(t);null!==s&&this.set(t,s)})}subscribe(t,s){this.listeners[t]||(this.listeners[t]=[]),this.listeners[t].push(s)}unsubscribe(t,s){this.listeners[t]&&(this.listeners[t]=this.listeners[t].filter(t=>t!==s))}unsubscribeAll(t){this.listeners[t]&&delete this.listeners[t]}setToLocalStorage(t="stama"){localStorage.setItem(t,JSON.stringify(this.state))}getFromLocalStorage(t="stama"){const s=localStorage.getItem(t);return s?JSON.parse(s):null}reset(t={}){this.state=t,this.persist&&this.setToLocalStorage();for(const s in this.listeners)this.listeners.hasOwnProperty(s)&&this.listeners[s].forEach(e=>e(t[s]));this.clearHistory()}batchSet(t){for(const s in t)t.hasOwnProperty(s)&&this.set(s,t[s])}use(t){this.middlewares.push(t)}runMiddlewares(t,s){this.middlewares.forEach(e=>e(t,s))}remove(t){delete this.state[t],this.persist&&this.setToLocalStorage()}clear(){this.state={},this.persist&&this.setToLocalStorage(),this.clearHistory()}getAllKeys(){return Object.keys(this.state)}merge(t){this.state={...this.state,...t},this.persist&&this.setToLocalStorage()}setPartToLocalStorage(t,s="stama_part"){const e={};t.forEach(t=>{this.state.hasOwnProperty(t)&&(e[t]=this.state[t])}),localStorage.setItem(s,JSON.stringify(e))}getPartFromLocalStorage(t,s="stama_part"){const e=JSON.parse(localStorage.getItem(s))||{};t.forEach(t=>{e.hasOwnProperty(t)&&(this.state[t]=e[t])})}getPrevious(t){return this.previousState[t]}undo(){if(this.historyIndex>0){this.historyIndex--;const t=this.history[this.historyIndex];this.state={...t},this.persist&&this.setToLocalStorage(),Object.keys(t).forEach(s=>{this.listeners[s]&&this.listeners[s].forEach(e=>e(t[s]))})}}redo(){if(this.historyIndex<this.history.length-1){this.historyIndex++;const t=this.history[this.historyIndex];this.state={...t},this.persist&&this.setToLocalStorage(),Object.keys(t).forEach(s=>{this.listeners[s]&&this.listeners[s].forEach(e=>e(t[s]))})}}clearHistory(){this.history=[],this.historyIndex=-1}getFromHistory(t){return this.history[t]}setDebugMode(t){this.debugMode=t}setPersist(t){this.persist=t}}export default new stama;